void extract(std::string& source_file, int start_line,
int end_line, std::string& new_template_name, std::string& snippet_file) {
    int line_number = 0;

    // Opening and validating the source file for reading
    std::ifstream source_input(source_file);
    if (!source_input.is_open()) {
        std::cerr << "Error opening source file: " << source_file << std::endl;
        return;
    }

    std::vector<std::string> extracted_lines;
    std::string line;

    // Adding header line
    extracted_lines.push_back("#-- name: " + new_template_name);

    // Adding lines within the specified range
    while (std::getline(source_input, line)) {
        line_number++;
        if (line_number >= start_line && line_number <= end_line) {
            extracted_lines.push_back(line);
        }
    }

    // Add the end line to the extracted lines
    extracted_lines.push_back("#-- end");

    // Check if any lines were extracted
    if (extracted_lines.size() == 2) { // Only the header and end lines
        std::cerr << "No lines extracted from " << source_file
                  << " for the specified range." << std::endl;
        source_input.close();
        return;
    }

    // If the number of extracted lines does not match the expected range, report an error
    if ((int)extracted_lines.size() != (end_line - start_line + 3)) { // +3 for header and end lines
        std::cerr << "Extracted lines do not match the specified range." << std::endl;
        return;
    }

    source_input.close();

    line_number = 0;
    std::ifstream snippet_input(snippet_file);
    if (!snippet_input.is_open()) {
        std::cerr << "Error opening snippet file: " << snippet_file << std::endl;
        return;
    }
    
    // Check if the template already exists in the snippet file
    while (std::getline(snippet_input, line)) {
        line_number++;
        if (line == "#-- name: " + new_template_name) {
            std::cerr << "Template '" << new_template_name << "' already exists in snippet file." << std::endl;
            snippet_input.close();
            return;
        }
    }

    snippet_input.close();

    file_overwrite(snippet_file, extracted_lines, line_number + 2); // +2 to account for the header and end lines

    // Output a success message
    std::cout << "Extracted lines from " << source_file
              << " and saved as template '" << new_template_name
              << "' in snippet file " << snippet_file << "." << std::endl;
}
